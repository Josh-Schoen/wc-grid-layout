{"version":3,"file":"foundation.js","sourceRoot":"","sources":["../../../src/components/grid-layout/grid-cell/foundation.ts"],"names":[],"mappings":"AAoCE,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACnC,KAA4B,EAC5B,UAAiC,EACzB,EAAE;IACV,OAAQ,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;AAC/F,CAAC,CAAC;AAEF,8EAA8E;AAC9E,qBAAqB;AACrB,eAAe;AACf,2DAA2D;AAC3D,oDAAoD;AACpD,QAAQ;AAER,MAAM;AACN,aAAa;AACb,qBAAqB;AACrB,kBAAkB;AAClB,OAAO;AACP,KAAK;AAGL,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,KAAsB,EACtB,UAAiC,EACvB,EAAE;IACZ,IAAI,UAAU,GAAI,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAA;IACpG,UAAU,mCACL,UAAU,KACb,GAAG,oBAAO,kBAAkB,CAAC,UAAU,CAAC,IAC3C,CAAA;IAED,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,KAAe,EAA4B,EAAE;IACvE,IAAI,KAAK,CAAC,GAAG,EAAE;QACb,OAAO;YACL,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM;YACjD,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM;SAC5C,CAAA;KAEF;IACD,OAAO;QACL,KAAK,EAAE,MAAM;QACb,GAAG,EAAE,MAAM;KACZ,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { BreakPointMediaMatch } from \"../foundation\";\n\n\nexport interface CellPoistion {\n    start?: number | 'auto';\n    end?: number | 'auto';\n}\n\nexport interface CellSize extends CellPoistion  {\n    row?: CellPoistion;\n  }\n\n  export type Placement =\n  | \"center\"\n  | \"flex-end\"\n  | \"space-between\"\n  | \"space-around\"\n  | \"stretch\"\n  | \"flex-start\";\n\n  export interface BreakPointCells {\n      xs: CellSize;\n      sm: CellSize;\n      md: CellSize;\n      lg: CellSize\n      xl: CellSize\n  }\n\n  export interface BreakPointCellsString {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string\n    xl: string\n}\n\n  export const getCellPositionString = (\n    cells: BreakPointCellsString,\n    mediaMatch?: BreakPointMediaMatch,\n  ): string => {\n    return  mediaMatch && cells[mediaMatch.breakpoint] ? cells[mediaMatch.breakpoint] : cells.xs;\n  };\n\n  // const getCellRowPoistion = (value: CellSize): CellPoistion | undefined => {\n  //   if (value.row) {\n  //     return {\n  //       start: value.row.start ? value.row.start : 'auto',\n  //       end: value.row.end ? value.row.end : 'auto'\n  //     }\n\n  //   }\n  //   return {\n  //     start: 'auto',\n  //     end: 'auto'\n  //   };\n  // };\n\n\n  export const getCellCPosition = (\n    cells: BreakPointCells,\n    mediaMatch?: BreakPointMediaMatch,\n  ): CellSize => {\n    let breakpoint  = mediaMatch && cells[mediaMatch.breakpoint] ? cells[mediaMatch.breakpoint] : cells.xs\n      breakpoint = {\n        ...breakpoint,\n        row : {...getCellRowPoistion(breakpoint) }\n    }\n\n    return breakpoint;\n  };\n\n  const getCellRowPoistion = (value: CellSize): CellPoistion | undefined => {\n    if (value.row) {\n      return {\n        start: value.row.start ? value.row.start : 'auto',\n        end: value.row.end ? value.row.end : 'auto'\n      }\n\n    }\n    return {\n      start: 'auto',\n      end: 'auto'\n    };\n  };"]}